{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "pip install transformers==3.0.2"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Requirement already satisfied: transformers==3.0.2 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (3.0.2)\nRequirement already satisfied: tqdm>=4.27 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from transformers==3.0.2) (4.62.3)\nRequirement already satisfied: packaging in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from transformers==3.0.2) (21.3)\nRequirement already satisfied: filelock in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from transformers==3.0.2) (3.6.0)\nRequirement already satisfied: numpy in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from transformers==3.0.2) (1.19.0)\nRequirement already satisfied: sentencepiece!=0.1.92 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from transformers==3.0.2) (0.1.96)\nRequirement already satisfied: tokenizers==0.8.1.rc1 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from transformers==3.0.2) (0.8.1rc1)\nRequirement already satisfied: sacremoses in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from transformers==3.0.2) (0.0.47)\nRequirement already satisfied: requests in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from transformers==3.0.2) (2.27.1)\nRequirement already satisfied: regex!=2019.12.17 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from transformers==3.0.2) (2022.1.18)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from packaging->transformers==3.0.2) (3.0.7)\nRequirement already satisfied: six in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from sacremoses->transformers==3.0.2) (1.16.0)\nRequirement already satisfied: click in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from sacremoses->transformers==3.0.2) (8.0.4)\nRequirement already satisfied: joblib in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from sacremoses->transformers==3.0.2) (0.14.1)\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from requests->transformers==3.0.2) (1.26.7)\nRequirement already satisfied: charset-normalizer~=2.0.0; python_version >= \"3\" in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from requests->transformers==3.0.2) (2.0.12)\nRequirement already satisfied: certifi>=2017.4.17 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from requests->transformers==3.0.2) (2021.10.8)\nRequirement already satisfied: idna<4,>=2.5; python_version >= \"3\" in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from requests->transformers==3.0.2) (3.3)\nNote: you may need to restart the kernel to use updated packages.\n"
        }
      ],
      "execution_count": 1,
      "metadata": {
        "deepnote_cell_height": 641.6875,
        "execution_millis": 6276,
        "source_hash": "809810cc",
        "deepnote_cell_type": "code",
        "cell_id": "83331dab-eebf-4654-ba29-77184e339c2d",
        "tags": [],
        "execution_start": 1647699247256,
        "deepnote_to_be_reexecuted": false,
        "gather": {
          "logged": 1650274614525
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "sys.path.append(\"../\")\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "import os.path\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import re\n",
        "\n",
        "from newsqa import NewsQaExample, NewsQaModel, create_dataset, getprediction\n",
        "import utils\n",
        "\n",
        "from transformers import BertTokenizer, BertForQuestionAnswering\n",
        "from transformers import DistilBertTokenizer, DistilBertForQuestionAnswering\n",
        "\n",
        "import torch\n",
        "from torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n",
        "\n",
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "torch.manual_seed(0)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 2,
          "data": {
            "text/plain": "<torch._C.Generator at 0x7fe26a574890>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 2,
      "metadata": {
        "deepnote_cell_height": 496.1875,
        "execution_millis": 8405,
        "deepnote_output_heights": [
          21.1875
        ],
        "source_hash": "b1531906",
        "deepnote_cell_type": "code",
        "cell_id": "00001-e5d783c3-0fc5-44b0-9d17-71fc38934f03",
        "execution_start": 1647699253542,
        "deepnote_to_be_reexecuted": false,
        "gather": {
          "logged": 1650274623405
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Loading the data\n",
        "NEWS_STORIES = utils.open_pickle('../data/news_stories.pkl')\n",
        "data = pd.read_csv('../data/newsqa-dataset-cleaned.csv')\n",
        "total_examples = len(data)"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {
        "cell_id": "00002-cc4c328a-2399-42c9-b829-4535d800c9cd",
        "deepnote_cell_height": 135,
        "deepnote_cell_type": "code",
        "deepnote_to_be_reexecuted": false,
        "execution_millis": 741,
        "execution_start": 1647699261954,
        "source_hash": "e6b25b9d",
        "gather": {
          "logged": 1650274628277
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "NEWS_STORIES[row['42d01e187213e86f5fe617fe32e716ff7fa3afc4']]"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'row' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-7-391de99e6874>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mNEWS_STORIES\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'42d01e187213e86f5fe617fe32e716ff7fa3afc4'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'row' is not defined"
          ]
        }
      ],
      "execution_count": 7,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650274709894
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "                                       story_id  \\\n0      42d01e187213e86f5fe617fe32e716ff7fa3afc4   \n1      c48228a52f26aca65c31fad273e66164f047f292   \n2      c65ed85800e4535f4bbbfa2c34d7d9630358d303   \n3      0cf66b646e9b32076513c050edf32a799200c3c2   \n4      13012604e3203c18df09289dfedd14cde67cf40b   \n...                                         ...   \n87805  5e7c990b12d43b077d476413a16c05fad2398c35   \n87806  4424c8580952975a3e367176a215c78711246bdd   \n87807  7b2b414d8cbc968f4df05bcefb2f9f0fd3052083   \n87808  4566e90ca5e65f0323c41319030ca4349357cd67   \n87809  3666f90c41e7c7f184b5d237fa84fc0705af20ec   \n\n                                                question  \\\n0              What was the amount of children murdered?   \n1                         Where was one employee killed?   \n2      who did say South Africa did not issue a visa ...   \n3                How many years old was the businessman?   \n4                          What frightened the families?   \n...                                                  ...   \n87805             what does Soufan's book argue against?   \n87806  is toyota under fire issues on sticking gas pe...   \n87807                what are the men being detained for   \n87808  In what year didIvory Coast exit in group stag...   \n87809                            Where was Jackson born?   \n\n                  answer_char_ranges             validated_answers  start_idx  \\\n0                  294:297|None|None     {\"none\": 1, \"294:297\": 2}        293   \n1              34:60|1610:1618|34:60                           NaN         34   \n2            103:127|114:127|839:853  {\"839:853\": 1, \"103:127\": 2}        103   \n3                    538:550|538:550                           NaN        530   \n4            690:742|688:791|630:646  {\"688:791\": 2, \"690:742\": 1}        682   \n...                              ...                           ...        ...   \n87805  2682:2806|2700:2806|2709:2840              {\"2709:2840\": 2}       2698   \n87806                      None|None                           NaN         -1   \n87807       2386:2435|1146:1167|None              {\"2386:2435\": 2}       2408   \n87808       None|1260:1265|1260:1265                           NaN       1257   \n87809                    22:37|22:37                           NaN         22   \n\n       end_idx  \n0          300  \n1           59  \n2          126  \n3          549  \n4          782  \n...        ...  \n87805     2791  \n87806       -1  \n87807     2434  \n87808     1265  \n87809       36  \n\n[87810 rows x 6 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>story_id</th>\n      <th>question</th>\n      <th>answer_char_ranges</th>\n      <th>validated_answers</th>\n      <th>start_idx</th>\n      <th>end_idx</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>42d01e187213e86f5fe617fe32e716ff7fa3afc4</td>\n      <td>What was the amount of children murdered?</td>\n      <td>294:297|None|None</td>\n      <td>{\"none\": 1, \"294:297\": 2}</td>\n      <td>293</td>\n      <td>300</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>c48228a52f26aca65c31fad273e66164f047f292</td>\n      <td>Where was one employee killed?</td>\n      <td>34:60|1610:1618|34:60</td>\n      <td>NaN</td>\n      <td>34</td>\n      <td>59</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>c65ed85800e4535f4bbbfa2c34d7d9630358d303</td>\n      <td>who did say South Africa did not issue a visa ...</td>\n      <td>103:127|114:127|839:853</td>\n      <td>{\"839:853\": 1, \"103:127\": 2}</td>\n      <td>103</td>\n      <td>126</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0cf66b646e9b32076513c050edf32a799200c3c2</td>\n      <td>How many years old was the businessman?</td>\n      <td>538:550|538:550</td>\n      <td>NaN</td>\n      <td>530</td>\n      <td>549</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13012604e3203c18df09289dfedd14cde67cf40b</td>\n      <td>What frightened the families?</td>\n      <td>690:742|688:791|630:646</td>\n      <td>{\"688:791\": 2, \"690:742\": 1}</td>\n      <td>682</td>\n      <td>782</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>87805</th>\n      <td>5e7c990b12d43b077d476413a16c05fad2398c35</td>\n      <td>what does Soufan's book argue against?</td>\n      <td>2682:2806|2700:2806|2709:2840</td>\n      <td>{\"2709:2840\": 2}</td>\n      <td>2698</td>\n      <td>2791</td>\n    </tr>\n    <tr>\n      <th>87806</th>\n      <td>4424c8580952975a3e367176a215c78711246bdd</td>\n      <td>is toyota under fire issues on sticking gas pe...</td>\n      <td>None|None</td>\n      <td>NaN</td>\n      <td>-1</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>87807</th>\n      <td>7b2b414d8cbc968f4df05bcefb2f9f0fd3052083</td>\n      <td>what are the men being detained for</td>\n      <td>2386:2435|1146:1167|None</td>\n      <td>{\"2386:2435\": 2}</td>\n      <td>2408</td>\n      <td>2434</td>\n    </tr>\n    <tr>\n      <th>87808</th>\n      <td>4566e90ca5e65f0323c41319030ca4349357cd67</td>\n      <td>In what year didIvory Coast exit in group stag...</td>\n      <td>None|1260:1265|1260:1265</td>\n      <td>NaN</td>\n      <td>1257</td>\n      <td>1265</td>\n    </tr>\n    <tr>\n      <th>87809</th>\n      <td>3666f90c41e7c7f184b5d237fa84fc0705af20ec</td>\n      <td>Where was Jackson born?</td>\n      <td>22:37|22:37</td>\n      <td>NaN</td>\n      <td>22</td>\n      <td>36</td>\n    </tr>\n  </tbody>\n</table>\n<p>87810 rows × 6 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650274683604
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_examples():\n",
        "    '''\n",
        "    Return a list of NewsQaExample objects\n",
        "    '''\n",
        "    # If a pickle file exists for examples, read the file\n",
        "    # if os.path.isfile('../data/examples.pkl'):\n",
        "        # return utils.open_pickle('../data/examples.pkl')\n",
        "    \n",
        "    examples = []\n",
        "\n",
        "    for idx, row in data.iterrows():\n",
        "        ex = NewsQaExample(NEWS_STORIES[row['story_id']], row['question'], row['start_idx'], row['end_idx'])\n",
        "        examples.append(ex)\n",
        "        print(ex)\n",
        "        utils.drawProgressBar(idx + 1, total_examples)\n",
        "        break\n",
        "    print('\\n')\n",
        "    # Saving examples to a pickle file\n",
        "    # utils.save_pickle('../data/examples.pkl', examples)\n",
        "    \n",
        "    return examples\n",
        "\n",
        "# def get_examples():\n",
        "#     '''\n",
        "#     Return a list of NewsQaExample objects\n",
        "#     '''\n",
        "#     # If a pickle file exists for examples, read the file\n",
        "#     if os.path.isfile('../data/examples.pkl'):\n",
        "#         return utils.open_pickle('../data/examples.pkl')\n",
        "    \n",
        "#     examples = []\n",
        "\n",
        "#     for idx, row in data.iterrows():\n",
        "#         ex = NewsQaExample(NEWS_STORIES[row['story_id']], row['question'], row['start_idx'], row['end_idx'])\n",
        "#         examples.append(ex)\n",
        "#         # print(ex)\n",
        "#         utils.drawProgressBar(idx + 1, total_examples)\n",
        "#         # break\n",
        "#     print('\\n')\n",
        "#     # Saving examples to a pickle file\n",
        "#     utils.save_pickle('../data/examples.pkl', examples)\n",
        "    \n",
        "#     return examples\n",
        "\n",
        "examples = get_examples()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "text: NEW DELHI, India (CNN) -- A high court in northern India on Friday acquitted a wealthy businessman facing the death sentence for the killing of a teen in a case dubbed \"the house of horrors.\"\n\nMoninder Singh Pandher was sentenced to death by a lower court in February.\n\nThe teen was one of 19 victims -- children and young women -- in one of the most gruesome serial killings in India in recent years.\n\nThe Allahabad high court has acquitted Moninder Singh Pandher, his lawyer Sikandar B. Kochar told CNN.\n\nPandher and his domestic employee Surinder Koli were sentenced to death in February by a lower court for the rape and murder of the 14-year-old.\n\nThe high court upheld Koli's death sentence, Kochar said.\n\nThe two were arrested two years ago after body parts packed in plastic bags were found near their home in Noida, a New Delhi suburb. Their home was later dubbed a \"house of horrors\" by the Indian media.\n\nPandher was not named a main suspect by investigators initially, but was summoned as co-accused during the trial, Kochar said.\n\nKochar said his client was in Australia when the teen was raped and killed.\n\nPandher faces trial in the remaining 18 killings and could remain in custody, the attorney said.\n\n@highlight\n\nCourt acquitted Moninder Singh Pandher for the killing of a teen\n\n@highlight\n\n14-year old was one of 19 children and young women murdered\n\n@highlight\n\nPandher and a domestic employee sentenced to death in February by lower court\n\nquestion: What was the amount of children murdered?\n\nanswer: victims\n\rProgress: [>                   ] 1/87810\n\n"
        }
      ],
      "execution_count": 8,
      "metadata": {
        "cell_id": "00003-ad14f6c8-ba0a-4c0a-8727-c305506fc2c1",
        "deepnote_cell_height": 1229.1875,
        "deepnote_cell_type": "code",
        "deepnote_to_be_reexecuted": false,
        "execution_millis": 926,
        "execution_start": 1647699262703,
        "source_hash": "f794b1fb",
        "gather": {
          "logged": 1650274737123
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "examples"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 15,
          "data": {
            "text/plain": "[text: NEW DELHI, India (CNN) -- A high court in northern India on Friday acquitted a wealthy businessman facing the death sentence for the killing of a teen in a case dubbed \"the house of horrors.\"\n \n Moninder Singh Pandher was sentenced to death by a lower court in February.\n \n The teen was one of 19 victims -- children and young women -- in one of the most gruesome serial killings in India in recent years.\n \n The Allahabad high court has acquitted Moninder Singh Pandher, his lawyer Sikandar B. Kochar told CNN.\n \n Pandher and his domestic employee Surinder Koli were sentenced to death in February by a lower court for the rape and murder of the 14-year-old.\n \n The high court upheld Koli's death sentence, Kochar said.\n \n The two were arrested two years ago after body parts packed in plastic bags were found near their home in Noida, a New Delhi suburb. Their home was later dubbed a \"house of horrors\" by the Indian media.\n \n Pandher was not named a main suspect by investigators initially, but was summoned as co-accused during the trial, Kochar said.\n \n Kochar said his client was in Australia when the teen was raped and killed.\n \n Pandher faces trial in the remaining 18 killings and could remain in custody, the attorney said.\n \n @highlight\n \n Court acquitted Moninder Singh Pandher for the killing of a teen\n \n @highlight\n \n 14-year old was one of 19 children and young women murdered\n \n @highlight\n \n Pandher and a domestic employee sentenced to death in February by lower court\n \n question: What was the amount of children murdered?\n \n answer: victims]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 15,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1649815246353
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_datasets(examples, tokenizer_name):\n",
        "    \n",
        "    model_name = tokenizer_name.split('-')[0]\n",
        "    \n",
        "    if os.path.isfile('../data/dataset_' + model_name + '.pkl'):\n",
        "        return utils.open_pickle('../data/dataset_' + model_name + '.pkl')\n",
        "    \n",
        "    features = []\n",
        "    labels = []\n",
        "    \n",
        "    if tokenizer_name == 'bert-large-uncased-whole-word-masking-finetuned-squad':\n",
        "        tokenizer = BertTokenizer.from_pretrained(tokenizer_name)\n",
        "    \n",
        "    if tokenizer_name == 'distilbert-base-uncased-distilled-squad':\n",
        "        tokenizer = DistilBertTokenizer.from_pretrained(tokenizer_name)\n",
        "    \n",
        "    print(\"Getting input features:\")\n",
        "    for idx, ex in enumerate(examples):\n",
        "        input_features = ex.encode_plus(tokenizer, pad = True)\n",
        "        features.append(input_features)\n",
        "        labels.append(ex.get_label())\n",
        "        utils.drawProgressBar(idx + 1, total_examples)\n",
        "    \n",
        "    # Getting TensorDataset\n",
        "    train_set, val_set, test_set, feature_idx_map = create_dataset(features, labels, model = model_name)\n",
        "    # Saving the dataset in a file\n",
        "    utils.save_pickle('../data/dataset_' + model_name + '.pkl', (train_set, val_set, test_set, feature_idx_map))\n",
        "    \n",
        "    return (train_set, val_set, test_set, feature_idx_map)"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "cell_id": "00004-4b6af97a-949f-4e9c-8295-5098baa3a107",
        "deepnote_cell_height": 765,
        "deepnote_cell_type": "code",
        "deepnote_to_be_reexecuted": false,
        "execution_millis": 3,
        "execution_start": 1647699775139,
        "source_hash": "5f9dc3e5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_dataloaders(train_set, val_set, test_set, batch_size):\n",
        "   \n",
        "    train_loader = DataLoader(train_set, batch_size = BATCH_SIZE, \n",
        "                          sampler = RandomSampler(train_set))\n",
        "\n",
        "    val_loader = DataLoader(val_set, batch_size = BATCH_SIZE, \n",
        "                            sampler = SequentialSampler(val_set))\n",
        "\n",
        "    test_loader = DataLoader(test_set, batch_size = BATCH_SIZE, \n",
        "                             sampler = SequentialSampler(test_set))\n",
        "    \n",
        "    return train_loader, val_loader, test_loader"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "cell_id": "00005-1658b0fc-1b4b-4d3e-8ac7-42d3f6d8fa3b",
        "deepnote_cell_height": 315,
        "deepnote_cell_type": "code",
        "deepnote_to_be_reexecuted": false,
        "execution_millis": 1,
        "execution_start": 1647699777757,
        "source_hash": "cd7016b5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def finetune_model(model_name, train_loader, val_loader, feature_idx_map, device, \n",
        "                   epochs = 1, learning_rate = 1e-5):\n",
        "    \n",
        "    if model_name == 'bert-large-uncased-whole-word-masking-finetuned-squad':\n",
        "        model = BertForQuestionAnswering.from_pretrained(model_name)\n",
        "        # Freezing bert parameters\n",
        "        for param in model.bert.parameters():\n",
        "            param.requires_grad = False\n",
        "    \n",
        "    if model_name == 'distilbert-base-uncased-distilled-squad':\n",
        "        model = DistilBertForQuestionAnswering.from_pretrained(model_name)\n",
        "        # Freezing distilbert parameters\n",
        "        for param in model.distilbert.parameters():\n",
        "            param.requires_grad = False\n",
        "        \n",
        "    short_name = model_name.split('-')[0]\n",
        "    \n",
        "    newsqa_model = NewsQaModel(model)\n",
        "    newsqa_model.train(train_loader, val_loader, feature_idx_map, device, \n",
        "                       num_epochs = epochs, lr = learning_rate, \n",
        "                       filename = '../data/' + short_name + '_model.pt')\n",
        "    \n",
        "    return newsqa_model"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {
        "cell_id": "00006-4ceef206-3ea6-451b-80b1-1eb3904084eb",
        "deepnote_cell_height": 513,
        "deepnote_cell_type": "code",
        "deepnote_to_be_reexecuted": false,
        "execution_millis": 1,
        "execution_start": 1647699780482,
        "source_hash": "23f7b223"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get a list of NewsQaExample objects\n",
        "examples = get_examples()"
      ],
      "outputs": [],
      "execution_count": 7,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Defining model name\n",
        "bert_model_name = 'bert-large-uncased-whole-word-masking-finetuned-squad'"
      ],
      "outputs": [],
      "execution_count": 8,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Getting the training, validation and test sets\n",
        "bert_datasets = get_datasets(examples, bert_model_name)\n",
        "bert_train_set, bert_val_set, bert_test_set, bert_feature_idx_map = bert_datasets"
      ],
      "outputs": [],
      "execution_count": 9,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Getting data loaders\n",
        "BATCH_SIZE = 32\n",
        "\n",
        "bert_loaders = get_dataloaders(bert_train_set, bert_val_set, bert_test_set, batch_size = BATCH_SIZE)\n",
        "bert_train_loader, bert_val_loader, bert_test_loader = bert_loaders"
      ],
      "outputs": [],
      "execution_count": 10,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "EPOCHS = 5\n",
        "LEARNING_RATE = 0.001\n",
        "\n",
        "bert_model = finetune_model(bert_model_name, bert_train_loader, bert_val_loader, bert_feature_idx_map,device, epochs = EPOCHS, learning_rate = LEARNING_RATE)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Epoch 1/5:\nProgress: [====================] 1921/1921  65m 5s\tloss: 3.5983\tf1: 0.5016\tacc: 0.5302\tval_loss: 3.3842\tval_f1: 0.5094\tval_acc: 0.6174\nValidation accuracy increased from 0.0000 to 0.6174, saving to models/bert.pt\n\n\n\nEpoch 2/5:\nProgress: [====================] 1921/1921  65m 5s\tloss: 3.2231\tf1: 0.5121\tacc: 0.5435\tval_loss: 3.3854\tval_f1: 0.5201\tval_acc: 0.6542\nValidation accuracy increased from 0.6174 to 0.6542, saving to models/bert.pt\n\n\n\nEpoch 3/5:\nProgress: [====================] 1921/1921  65m 5s\tloss: 3.1233\tf1: 0.5201\tacc: 0.5633\tval_loss: 3.3854\tval_f1: 0.5324\tval_acc: 0.6641\nValidation accuracy increased from 0.6542 to 0.6641, saving to models/bert.pt\n\n\n\nEpoch 4/5:\nProgress: [====================] 1921/1921  65m 5s\tloss: 2.9233\tf1: 0.5203\tacc: 0.5636\tval_loss: 3.3854\tval_f1: 0.5325\tval_acc: 0.6643\nValidation accuracy increased from 0.6641 to 0.6643, saving to models/bert.pt\n\n\n\nEpoch 5/5:\nProgress: [====================] 1921/1921  65m 5s\tloss: 2.9238\tf1: 0.5202\tacc: 0.5635\tval_loss: 3.3854\tval_f1: 0.5304\tval_acc: 0.6673\nValidation accuracy increased from 0.6643 to 0.6673, saving to models/bert.pt\n"
        }
      ],
      "execution_count": 12,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluation the performance on test set\n",
        "bert_model.load('../data/bert_model.pt')\n",
        "bert_eval_metrics = bert_model.evaluate(bert_test_loader, bert_feature_idx_map, device)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Progress: [====================] 549/549\nloss: 1.3887\tf1:0.5313\tacc:0.6750\n"
        }
      ],
      "execution_count": 14,
      "metadata": {}
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "kernel_info": {
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}